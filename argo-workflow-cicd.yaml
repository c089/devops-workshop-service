apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: hello-cd-
spec:
  entrypoint: build-and-deploy
  templates:
    - name: build-and-deploy
      steps:
        - - name: build
            template: build
        - - name: update-image-to-deploy
            template: update-image-to-deploy
            arguments:
              parameters:
                - name: image
                  value: "{{steps.build.outputs.parameters.image}}"
        - - name: deploy
            template: deploy
    - name: build
      inputs:
        artifacts:
          - name: sourcecode
            path: /src
            git:
              repo: http://developer:password@gitea-http.gitea.svc.cluster.local:3000/developer/service
              revision: main
      outputs:
        parameters:
        - name: image
          valueFrom:
            path: /tmp/image
      script:
        image: docker:20.10.21
        command: [ "sh" ]
        source: |
          until docker ps; do sleep 1; done;
          image="registry:5000/hello-service:argo-{{workflow.uid}}"
           cd /src/
           docker build -t ${image} .
           docker push ${image}
           echo $image >> /tmp/image
        env:
        - name: DOCKER_HOST
          value: 127.0.0.1
      sidecars:
        - name: dind
          image: docker:20.10.21-dind
          command: [dockerd-entrypoint.sh]
          args: ["--insecure-registry", "registry:5000"]
          env:
            - name: DOCKER_TLS_CERTDIR
              value: ""
          securityContext:
            privileged: true
          mirrorVolumeMounts: true
    - name: update-image-to-deploy
      inputs:
        parameters:
        - name: image
        artifacts:
        - name: sourcecode
          path: /src
          git:
            repo: http://developer:password@gitea-http.gitea.svc.cluster.local:3000/developer/deployment
            singleBranch: true
            branch: main
      script:
        image: alpine:3.17.0
        command: [ "sh" ]
        source: |
            set -eux
            apk add yq
            apk add git
            cd /src
            ./deploy.sh {{inputs.parameters.image}}
    - name: deploy
      script:
        image: alpine/k8s:1.25.4
        command: [ "sh" ]
        env:
         - name: ARGOCD_TOKEN
           valueFrom:
             secretKeyRef:
               name: argocd-argo-workflows-token
               key: auth-token
        source: |
          set -xueo pipefail

          # TODO: use builder image or put binaries in repo
          mkdir /tmp/bin
          export PATH=$PATH:/tmp/bin
          curl -sSL -o /tmp/bin/kubectl-argo-rollouts https://github.com/argoproj/argo-rollouts/releases/download/v1.3.1/kubectl-argo-rollouts-linux-amd64
          curl -sSL -o /tmp/bin/argocd                https://github.com/argoproj/argo-cd/releases/download/v2.5.3/argocd-linux-amd64
          ls /tmp/bin
          chmod u+x /tmp/bin/*

          # sync to initiate rollout
          argocd --server argo-cd-argocd-server.argocd.svc.cluster.local --plaintext --auth-token="$ARGOCD_TOKEN" app sync hello
          # wait for rollout to start
          kubectl wait --for=condition=Paused rollout hello
          # wait for rollout to finish
          kubectl argo rollouts status hello
          # print rollout details to log
          kubectl argo rollouts get rollout hello
